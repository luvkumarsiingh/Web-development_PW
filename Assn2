
////1
const square = (num) => num * num;

const number = 5;  // You can change this number to test with different values
const result = square(number);
console.log(`The square of ${number} is: ${result}`);

////2
const ages = [19, 22, 19, 40, 30, 40, 24, 40, 21, 30, 24, 19, 21, 30];

// Sort the array to simplify finding the median and range
ages.sort((a, b) => a - b);

const minAge = ages[0];
const maxAge = ages[ages.length - 1];

// Calculate median
const middleIndex = Math.floor(ages.length / 2);
let medianAge;
if (ages.length % 2 === 0) {
    medianAge = (ages[middleIndex - 1] + ages[middleIndex]) / 2;
} else {
    medianAge = ages[middleIndex];
}

// Calculate average
const sum = ages.reduce((acc, age) => acc + age, 0);
const averageAge = sum / ages.length;

// Calculate range
const range = maxAge - minAge;

// Compare (min - average) and (max - average) using abs() method
const minDiff = Math.abs(minAge - averageAge);
const maxDiff = Math.abs(maxAge - averageAge);

console.log(`Minimum Age: ${minAge}`);
console.log(`Maximum Age: ${maxAge}`);
console.log(`Median Age: ${medianAge}`);
console.log(`Average Age: ${averageAge}`);
console.log(`Range of Ages: ${range}`);
console.log(`Absolute difference (min - average): ${minDiff}`);
console.log(`Absolute difference (max - average): ${maxDiff}`);

////3
// Create a Map to store contact information
const contactMap = new Map();

// Function to add contact details to the Map
function addContact(name, age, email, location) {
    contactMap.set(name, { age, email, location });
}

// Function to retrieve contact details by name
function getContactDetails(name) {
    if (contactMap.has(name)) {
        const contact = contactMap.get(name);
        console.log(`Contact Details for ${name}:`);
        console.log(`Age: ${contact.age}`);
        console.log(`Email: ${contact.email}`);
        console.log(`Location: ${contact.location}`);
    } else {
        console.log(`No contact found for ${name}`);
    }
}

// Example usage
addContact('Alice', 30, 'alice@example.com', 'New York');
addContact('Bob', 25, 'bob@example.com', 'Los Angeles');

getContactDetails('Alice');


////4
// Define the objects with properties name and age
const person1 = {
    name: 'Alice',
    age: 30
};

const person2 = {
    name: 'Bob',
    age: 25
};

// Define the introduce function
function introduce() {
    console.log(`Hello, I'm ${this.name}, and I'm ${this.age} years old.`);
}

// Use the call method to make each person introduce themselves
introduce.call(person1);
// Output: Hello, I'm Alice, and I'm 30 years old.

introduce.call(person2);
// Output: Hello, I'm Bob, and I'm 25 years old.


////5
// Create a Set to store unique numbers
const uniqueNumbers = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);

// Create a Map to associate each number with its square
const numberSquares = new Map();

// Populate the Map with numbers and their squares
uniqueNumbers.forEach(num => {
    numberSquares.set(num, num * num);
});

// Print unique numbers
console.log('Unique Numbers:');
uniqueNumbers.forEach(num => console.log(num));

// Print corresponding squares
console.log('Corresponding Squares:');
numberSquares.forEach((square, num) => console.log(`The square of ${num} is ${square}`));


/////6
// Define the displayInfo function
function displayInfo(name, role) {
    console.log(`Name: ${name}, Role: ${role}`);
}

// Using call to invoke displayInfo with specific arguments
displayInfo.call(null, 'Alice', 'Developer');
// Output: Name: Alice, Role: Developer

// Using apply to invoke displayInfo with arguments passed as an array
displayInfo.apply(null, ['Bob', 'Designer']);
// Output: Name: Bob, Role: Designer

// Define the greet function
function greet() {
    console.log(`Hello, ${this.name}!`);
}

// Create an object to use as the context for greet
const context = { name: 'Charlie' };

// Use bind to create a new function boundGreet with a specific context
const boundGreet = greet.bind(context);

// Call boundGreet to log the greeting
boundGreet();
// Output: Hello, Charlie!


////7
// Create the calculator object
const calculator = {
    add: (a, b) => a + b,
    subtract: (a, b) => a - b,
    multiply: (a, b) => a * b,

    // Implement the calculate method
    calculate: function(operation, a, b) {
        if (this[operation]) {
            return this[operation](a, b);
        } else {
            throw new Error('Invalid operation');
        }
    }
};

// Use call to perform an addition operation
const additionResult = calculator.calculate.call(calculator, 'add', 5, 3);
console.log(`Addition Result: ${additionResult}`);  // Output: Addition Result: 8

// Use apply to perform a multiplication operation with arguments as an array
const multiplicationResult = calculator.calculate.apply(calculator, ['multiply', 4, 7]);
console.log(`Multiplication Result: ${multiplicationResult}`);  // Output: Multiplication Result: 28

// Create the discountCalculator object
const discountCalculator = {
    discountPercentage: 10,

    // Method to apply discount
    applyDiscount: function(price) {
        const discountAmount = (this.discountPercentage / 100) * price;
        return price - discountAmount;
    }
};

// Use bind to create a new function calculateDiscount bound to the discountCalculator object
const calculateDiscount = discountCalculator.applyDiscount.bind(discountCalculator);

// Use calculateDiscount function
const originalPrice = 100;
const discountedPrice = calculateDiscount(originalPrice);
console.log(`Discounted Price: ${discountedPrice}`);  // Output: Discounted Price: 90
